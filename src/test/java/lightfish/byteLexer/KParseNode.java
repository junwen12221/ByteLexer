package lightfish.byteLexer;
class KParseNode extends P{public  int parse(){int c;if(x<size){c=cc();if(c=='e'){if(x<size){c=cc();if(c=='y'){if(x<size){c=cc();if(c=='_'){if(x<size){c=cc();if(c=='b'){if(x<size){c=cc();if(c=='l'){if(x<size){c=cc();if(c=='o'){if(x<size){c=cc();if(c=='c'){if(x<size){c=cc();if(c=='k'){if(x<size){c=cc();if(c=='_'){if(x<size){c=cc();if(c=='s'){if(x<size){c=cc();if(c=='i'){if(x<size){c=cc();if(c=='z'){if(x<size){c=cc();if(c=='e'){return endBlank(H.KEY_BLOCK_SIZE);}endId(c);return x;}return x;}endId(c);return x;}return x;}endId(c);return x;}return x;}endId(c);return x;}return x;}endId(c);return x;}return x;}endId(c);return x;}return x;}endId(c);return x;}return x;}endId(c);return x;}return x;}endId(c);return x;}return x;}endId(c);return x;}return x;}if(c=='s'){return endBlank(H.KEYS);}t=H.KEY;return x;}return x;}endId(c);return x;}return x;}if(c=='i'){if(x<size){c=cc();if(c=='l'){if(x<size){c=cc();if(c=='l'){return endBlank(H.KILL);}endId(c);return x;}return x;}endId(c);return x;}return x;}endId(c);return x;}return x;};}