package lightfish.byteLexer;
class KParseNode extends P{public  int parse(){int c;if(x<size){c=cc(x);if(c=='e'){if(x<size){c=cc(x);if(c=='y'){if(x<size){c=cc(x);if(c=='_'){if(x<size){c=cc(x);if(c=='b'){if(x<size){c=cc(x);if(c=='l'){if(x<size){c=cc(x);if(c=='o'){if(x<size){c=cc(x);if(c=='c'){if(x<size){c=cc(x);if(c=='k'){if(x<size){c=cc(x);if(c=='_'){if(x<size){c=cc(x);if(c=='s'){if(x<size){c=cc(x);if(c=='i'){if(x<size){c=cc(x);if(c=='z'){if(x<size){c=cc(x);if(c=='e'){if(x<size){c=cc(x);if (isBlank(c)){t=H.KEY_BLOCK_SIZE;return x;}else{endId();return x;}}else{return x;}}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}if(c=='s'){if(x<size){c=cc(x);if (isBlank(c)){t=H.KEYS;return x;}else{endId();return x;}}else{return x;}}return x;}return x;}endId();return x;}return x;}if(c=='i'){if(x<size){c=cc(x);if(c=='l'){if(x<size){c=cc(x);if(c=='l'){if(x<size){c=cc(x);if (isBlank(c)){t=H.KILL;return x;}else{endId();return x;}}else{return x;}}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;};}