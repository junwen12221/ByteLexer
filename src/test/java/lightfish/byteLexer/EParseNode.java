package lightfish.byteLexer;
 class EParseNode extends P{  public  int parse(){int c;if(x<size){c=cc(x);if(c=='x'){if(x<size){c=cc(x);if(c=='e'){if(x<size){c=cc(x);if(c=='c'){if(x<size){c=cc(x);if(c=='u'){if(x<size){c=cc(x);if(c=='t'){if(x<size){c=cc(x);if(c=='e'){if(x<size){c=cc(x);if (isBlank(c)){t=H.EXECUTE;return x;}}else{return x;}}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}if(c=='i'){if(x<size){c=cc(x);if(c=='s'){if(x<size){c=cc(x);if(c=='t'){if(x<size){c=cc(x);if(c=='s'){if(x<size){c=cc(x);if (isBlank(c)){t=H.EXISTS;return x;}}else{return x;}}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}if(c=='p'){if(x<size){c=cc(x);if(c=='l'){if(x<size){c=cc(x);if(c=='a'){if(x<size){c=cc(x);if(c=='i'){if(x<size){c=cc(x);if(c=='n'){if(x<size){c=cc(x);if (isBlank(c)){t=H.EXPLAIN;return x;}}else{return x;}}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}}