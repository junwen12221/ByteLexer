package lightfish.byteLexer;
 class OParseNode extends P{  public  int parse(){int c;if(x<size){c=cc(x);if(c=='f'){if(x<size){c=cc(x);if(c=='f'){if(x<size){c=cc(x);if(c=='l'){if(x<size){c=cc(x);if(c=='i'){if(x<size){c=cc(x);if(c=='n'){if(x<size){c=cc(x);if(c=='e'){if(x<size){c=cc(x);if (isBlank(c)){t=H.OFFLINE;return x;}}else{return x;}}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}if(c=='n'){if(x<size){c=cc(x);if(c=='l'){if(x<size){c=cc(x);if(c=='i'){if(x<size){c=cc(x);if(c=='n'){if(x<size){c=cc(x);if(c=='e'){if(x<size){c=cc(x);if (isBlank(c)){t=H.ONLINE;return x;}}else{return x;}}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}return x;}return x;}if(c=='r'){if(x<size){c=cc(x);if(c=='d'){if(x<size){c=cc(x);if(c=='e'){if(x<size){c=cc(x);if(c=='r'){if(x<size){c=cc(x);if (isBlank(c)){t=H.ORDER;return x;}}else{return x;}}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}endId();return x;}return x;}}